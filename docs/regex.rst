正規表現の基礎
==============

.. contents:: 目次

Basic Regular Expressions (BRE)
-------------------------------

参考URL
    - `<https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_03>`_

``grep`` と ``sed`` が対応している．

パターン
~~~~~~~~

``.``
    任意の1文字にマッチする．
``*``
    直前のパターンを0回以上繰り返す．
``^``
    行頭にマッチする．
``$``
    行末にマッチする．
``\(regex\)``
    正規表現をグループ化する．また，後方参照を行うための指定でもある．
``\n``
    後方参照を行う．``n`` には1から9までの数値が入り，グループ化の順に数字が割り振られている．
``[char-list]``
    キャラクタクラスと呼ばれ，``[]`` で囲った内側の文字のうち，いずれか1文字にマッチする．連続する文字の場合，例えば，``[a-z]`` のようにすることで任意の小文字1文字にマッチする．

    ``[`` の直後に ``^`` がくる場合，意味が逆（補集合）になり，例えば，``[^0-9]`` は数字以外にマッチする．

    キャラクタクラス内では，多くのメタ文字が意味を失う．特に古い処理系ではバックスラッシュによるエスケープも効かなくなる．``]``，``^``，``-`` をクラスに含めたいときは，``[]^-]`` のように，``^`` は ``[`` の直後以外，``]`` は ``[`` の直後（補集合の場合は ``^`` の直後），``-`` はリストの最後に置く．
``\{n\}``，``\{n,m\}``
    ``m``，``n`` には非負整数が入り，``n`` 回以上 ``m`` 回以下の繰り返しにマッチする．コンマを含まない場合は，ちょうど ``n`` 回の繰り返しにマッチする．コンマを含む場合，``n`` と ``m`` はいずれか一方を省略してもよく，そのとき，繰り返しの下限または上限を指定していないとして振る舞う．
